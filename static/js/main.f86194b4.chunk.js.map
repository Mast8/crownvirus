{"version":3,"sources":["images/corona.png","api/index.js","components/CountryPicker/CountryPicker.js","components/Cards/Cards.js","App.js","index.js"],"names":["module","exports","url","fetchData","country","a","changeableUrl","axios","get","data","confirmed","recovered","deaths","lastUpdate","fetchCountries","countries","map","name","fetchCountriesCases","date","reportDate","total","Countries","handleCountryChange","useState","setCountries","useEffect","fetchAPI","FormControl","className","NativeSelect","defaultValue","onChange","e","target","value","i","key","Info","addComma","number","toString","replace","porcentage","toFixed","stillInfected","still","console","log","Date","toDateString","App","state","setState","this","src","image","alt","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f86194b4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/corona.ff9e669e.png\";","import axios from 'axios';\n\nconst url = 'https://covid19.mathdro.id/api';\n\nexport const fetchData = async (country) => {\n  let changeableUrl = url;\n\n  if (country) {\n    changeableUrl = `${url}/countries/${country}`;\n  }\n\n  try {\n    const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(changeableUrl);\n\n    return { confirmed, recovered, deaths, lastUpdate };\n  } catch (error) {\n    return error;\n  }\n};\n\nexport const fetchDailyData = async () => {\n  try {\n    const { data } = await axios.get(`${url}/daily`);\n\n    return data.map(({ confirmed, deaths, reportDate: date }) => ({ confirmed: confirmed.total, deaths: deaths.total, date }));\n  } catch (error) {\n    return error;\n  }\n};\n\nexport const fetchCountries = async () => {\n  try {\n    const { data: { countries } } = await axios.get(`${url}/countries`);\n\n    return countries.map((country) => country.name);\n  } catch (error) {\n    return error;\n  }\n};\n\nexport const fetchCountriesCases = async () => {\n  try {\n    const { data } = await axios.get(`${url}/confirmed`);\n\n    return data.map(({ confirmed, deaths, reportDate: date }) => ({ confirmed: confirmed.total, deaths: deaths.total, date }));\n\n    // return data.map((country, confirmed) => country.name);\n  } catch (error) {\n    return error;\n  }\n};\n","import React, { useState, useEffect } from 'react';\nimport { NativeSelect, FormControl } from '@material-ui/core';\n\nimport { fetchCountries } from '../../api';\nimport'./CountryPicker.css';\n\nconst Countries = ({ handleCountryChange }) => {\n  const [countries, setCountries] = useState([]);\n\n  useEffect(() => {\n    const fetchAPI = async () => {\n      setCountries(await fetchCountries());\n    };\n\n    fetchAPI();\n  }, []);\n\n  return (\n    \n    <FormControl className=\"formControl\">\n      <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)}>\n        <option value=\"\">Global</option>\n        {countries.map((country, i) => <option key={i} value={country}>{country}</option>)}\n      </NativeSelect>\n    </FormControl>\n  );\n};\n\nexport default Countries;\n","import React from 'react';\nimport './Cards.css';\n\nconst Info = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\n  if (!confirmed) {\n    return 'Loading...';\n  }\n\n  const addComma = (number) => {\n    return number.toString().replace(/\\B(?<!\\.\\d*)(?=(\\d{3})+(?!\\d))/g, \",\");\n  }\n\n  \n\n  const porcentage = (confirmed, recovered) => {\n    const porcentaje = (recovered*100)/confirmed ;\n    return porcentaje.toFixed(2) ;\n  }\n\n  const stillInfected = (confirmed, recovered, deaths) => {\n    const still = confirmed-recovered-deaths ;\n    console.log(still +\"still\");\n    return still ;\n  }\n\n  return (\n      <div className=\"cards\">\n        <div className=\"card infected\">\n           <h2>  Confirmed  </h2>\n           <h1>    {addComma(confirmed.value)} </h1>\n            <p> Number of Confirmed cases of COVID-19.  </p>\n            <p>  {new Date(lastUpdate).toDateString()} </p>\n        </div>\n        <div className=\"card recovered\">\n            <h2>  Recovered ({porcentage(confirmed.value, recovered.value)}%)  </h2>\n             <h1>    {addComma(recovered.value)} </h1>\n         \n            <p>   Number of recoveries from COVID-19. </p>\n            <p> {new Date(lastUpdate).toDateString()}  </p>\n        </div>\n        <div className=\"card still\">\n            <h2>  Still infected ({porcentage(confirmed.value, stillInfected(confirmed.value, recovered.value, deaths.value))}%) </h2>\n            <h1>    {addComma(stillInfected(confirmed.value, recovered.value, deaths.value))} </h1>\n            <p>    Number of infected with COVID-19. </p>\n            <p> {new Date(lastUpdate).toDateString()}  </p>\n        </div>\n        <div className=\"card deaths\">\n            <h2>  Deaths ({porcentage(confirmed.value, deaths.value)}%) </h2>\n            <h1>    {addComma(deaths.value)} </h1>\n            <p>    Number of deaths case of COVID-19. </p>\n            <p> {new Date(lastUpdate).toDateString()}  </p>\n        </div>\n\n        \n    </div>\n    \n    \n );\n};\nexport default Info;\n","import React from 'react';\n\nimport { Cards, CountryPicker } from './components';\nimport { fetchData, fetchCountriesCases } from './api/';\nimport  './App.css';\n\nimport image from './images/corona.png';\n\nclass App extends React.Component {\n  state = {\n    data: {},\n    country: '',\n  }\n\n  async componentDidMount() {\n    const data = await fetchData();\n    const countries = await fetchCountriesCases();\n    this.setState({ data, countries });\n  }\n\n  handleCountryChange = async (country) => {\n    const data = await fetchData(country);\n    this.setState({ data, country: country });\n  }\n\n\n\n\n  render() {\n    const { data, country } = this.state;\n\n    return (\n      <div className=\"container\">\n          <img className=\"image\" src={image} alt=\"COVID-19\" />\n        <CountryPicker handleCountryChange={this.handleCountryChange} />\n        <Cards data={data} />\n\n      </div>\n    );\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}